---

# - name: Bootstrap python install
#   raw: pkg install -y python
#   when: ansible_os_family == 'FreeBSD'

- name: read platform variables
  include_vars:
    file: "{{ ansible_os_family }}.yml"
  tags: [always]

- name: whoami
  command: whoami
  register: whoami
  changed_when: false
  check_mode: false

- name: display whoami output
  debug:
    msg: "whoami: {{whoami.stdout}}"

- name: Updating APT repository cache (apt-get update)
  apt:
    update_cache: yes
  when: ansible_os_family == 'Debian'

# - name: Upgrade all packages to the latest version
#   package:
#     name: "*"
#     state: present

- name: Install packages
  package:
    name: "{{item}}"
    state: present
  with_items: "{{_packages}} + {{custom_packages|default([])}}"

- name: Get ports index [FreeBSD]
  command: portsnap auto
  args:
    creates: /usr/ports
  when: ansible_os_family == 'FreeBSD'

- name: Install ports
  portinstall:
    name: "{{item}}"
    state: present
  with_items: "{{_ports}} + {{custom_ports|default([])}}"
  when: ansible_os_family == 'FreeBSD'
# freebsd-update upgrade -r 11.1-RELEASE
#
# synth install dns/dnsdist
# lang/ruby23

# ansible_os_family == [RedHat, Debian, Suse, Gentoo, Archlinux, Solaris, Alpine, FreeBSD, OpenBSD]

# fix
# fatal: [dns-resolver]: FAILED! =>
# {"changed": true, "exit_status": 1, "failed": true, "msg": "failed to validate",
# "stderr": "", "stderr_lines": [], "stdout": "The included directory /etc/dnsdist/config.d/ does not exist!\n
# Fatal error: Unable to convert parameter from no value to N5boost8optionalIbEE
# \n", "stdout_lines": ["The included directory /etc/dnsdist/config.d/ does not exist!",
# "Fatal error: Unable to convert parameter from no value to N5boost8optionalIbEE"]}

# - name: Set Timezone
#   command: timedatectl set-timezone Australia/Sydney # centOS
#   dpkg-reconfigure tzdata # debian


- name: create missing folder for dnsdist
  file:
    path: /etc/dnsdist/config.d/
    state: directory
  when: dnsdist is defined and dnsdist
  tags: [dnsdist]
#
# - group:
#     name: pdns
#     state: present
#     when: ansible_os_family == 'Debian'

# - user:
#     name: pdns
#     state: present
#     comment: "pdns-recursor"
#     group: pdns
#     when: ansible_os_family == 'Debian'

# - group:
#     name: pdns-recursor
#     state: present
#     when: ansible_os_family == 'RedHat'

# - user:
#     name: pdns-recursor
#     state: present
#     comment: "pdns-recursor"
#     group: pdns-recursor
#     when: ansible_os_family == 'RedHat'
